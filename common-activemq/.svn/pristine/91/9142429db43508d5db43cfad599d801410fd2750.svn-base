package com.mq.service.impl;

import javax.jms.*;

import org.apache.log4j.Logger;

import com.mq.constant.Constant;
import com.mq.service.IMessageQueueSender;
import com.mq.util.ActiveMqConnectionUtil;

public class MessageQueueSender implements IMessageQueueSender {

	private static Logger logger = Logger.getLogger(MessageQueueSender.class);

	private Session session = null;
	private Destination destination = null;
	private MessageProducer producer = null;
	private Connection connection = null;

	// 发送文本消息
	public void sendQueueTextMessage(String message) {

		try {
			// 创建连接
			connection = ActiveMqConnectionUtil.getConnection();
			// 启动连接
			connection.start();
			// 获取session
			session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
			// 消息的目的地
			destination = session.createQueue(Constant.MQ_MESSAGE_QUEUE);

			producer = session.createProducer(destination);
			// 消息持久化
			producer.setDeliveryMode(DeliveryMode.PERSISTENT);
			// 发送文本消息
			TextMessage textMessage = session.createTextMessage(message);
			// 发送消息
			producer.send(textMessage);
			// session提交
			session.commit();
			logger.info("对列文本消息发送成功");
		} catch (JMSException e) {
			logger.error(e.getMessage());
		} catch (Exception e) {
			logger.error(e.getMessage());
		} finally {
			if (session != null) {
				try {
					// 关闭session
					session.close();
					if (producer != null)
						// 关闭producer
						producer.close();
					if (connection != null)
						// 关闭connection连接
						connection.close();
				} catch (JMSException e) {
					logger.error(e.getMessage());
				}
			}
		}
	}

	// 发送键对值消息
	public void sendQueueMapMessage(MapMessage mapMessage) {

		try {
			// 创建连接
			connection = ActiveMqConnectionUtil.getConnection();
			// 启动连接
			connection.start();
			// 获取session
			session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
			// 消息的目的地
			destination = session.createQueue(Constant.MQ_MESSAGE_QUEUE);
			// 消息生产者
			producer = session.createProducer(destination);
			// 消息持久化
			producer.setDeliveryMode(DeliveryMode.PERSISTENT);
			// 发送消息
			producer.send(mapMessage);
			// session提交
			session.commit();
			logger.info("对列键对值消息发送成功");
		} catch (JMSException e) {
			logger.error(e.getMessage());
		} finally {
			if (session != null) {
				try {
					// 关闭session
					session.close();
					if (producer != null)
						// 关闭producer
						producer.close();
					if (connection != null)
						// 关闭connection连接
						connection.close();
				} catch (JMSException e) {
					logger.error(e.getMessage());
				}
			}
		}
	}

	// 发送流消息
	public void sendQueueStreamMessage(StreamMessage streamMessage) {

		try {
			// 创建连接
			connection = ActiveMqConnectionUtil.getConnection();
			// 启动连接
			connection.start();
			// 获取session
			session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
			// 消息的目的地
			destination = session.createQueue(Constant.MQ_MESSAGE_QUEUE);
			// 消息生产者
			producer = session.createProducer(destination);
			// 消息持久化
			producer.setDeliveryMode(DeliveryMode.PERSISTENT);
			// 发送消息
			producer.send(streamMessage);
			// session提交
			session.commit();
			logger.info("对列流消息发送成功");
		} catch (JMSException e) {
			logger.error(e.getMessage());
		} finally {
			if (session != null) {
				try {
					// 关闭session
					session.close();
					if (producer != null)
						// 关闭producer
						producer.close();
					if (connection != null)
						// 关闭connection连接
						connection.close();
				} catch (JMSException e) {
					logger.error(e.getMessage());
				}
			}
		}
	}

	// 发送队列字节消息
	public void sendQueueBytesMessage(BytesMessage byteMessage) {

		try {
			// 创建连接
			connection = ActiveMqConnectionUtil.getConnection();
			// 启动连接
			connection.start();
			// 获取session
			session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
			// 消息的目的地
			destination = session.createQueue(Constant.MQ_MESSAGE_QUEUE);
			// 消息生产者
			producer = session.createProducer(destination);
			// 消息持久化
			producer.setDeliveryMode(DeliveryMode.PERSISTENT);
			// 发送消息
			producer.send(byteMessage);
			// session提交
			session.commit();
			logger.info("对列字节消息发送成功");
		} catch (JMSException e) {
			logger.error(e.getMessage());
		} finally {
			if (session != null) {
				try {
					// 关闭session
					session.close();
					if (producer != null)
						// 关闭producer
						producer.close();
					if (connection != null)
						// 关闭connection连接
						connection.close();
				} catch (JMSException e) {
					logger.error(e.getMessage());
				}
			}
		}
	}

	// 发送对象消息
	public void sendQueueObjectMessage(ObjectMessage objectMessage) {

		try {
			// 创建连接
			connection = ActiveMqConnectionUtil.getConnection();
			// 启动连接
			connection.start();
			// 获取session
			session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
			// 消息的目的地
			destination = session.createQueue(Constant.MQ_MESSAGE_QUEUE);
			// 消息生产者
			producer = session.createProducer(destination);
			// 消息持久化
			producer.setDeliveryMode(DeliveryMode.PERSISTENT);
			// 发送消息
			producer.send(objectMessage);
			// session提交
			session.commit();
			logger.info("对列字节消息发送成功");
		} catch (JMSException e) {
			logger.error(e.getMessage());
		} finally {
			if (session != null) {
				try {
					// 关闭session
					session.close();
					if (producer != null)
						// 关闭producer
						producer.close();
					if (connection != null)
						// 关闭connection连接
						connection.close();
				} catch (JMSException e) {
					logger.error(e.getMessage());
				}
			}
		}
	}

}
