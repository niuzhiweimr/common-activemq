package com.mq.call;

import java.io.StringReader;

import javax.jms.BytesMessage;
import javax.jms.JMSException;
import javax.jms.MapMessage;
import javax.jms.ObjectMessage;
import javax.jms.StreamMessage;
import javax.jms.TextMessage;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import com.mq.message.MsgCommand;

//抽象的消息监听处理类
public class MessageQueueReceiverHandler {

	public void queueTextMessageHandler(final TextMessage textMessage) {

		JAXBContext context2;
		try {
			String cmdMessage = textMessage.getText();
			context2 = JAXBContext.newInstance(MsgCommand.class);
			Unmarshaller unmarshaller = context2.createUnmarshaller();
			MsgCommand cmd = (MsgCommand) unmarshaller.unmarshal(new StringReader(cmdMessage));
			System.out.println("收到的cmd命令为" + cmd.getMsgBody());
			if (cmd.getCmd().equals("帮我把这个系统中的消息发送到另一个系统中")) {
				System.out.println("好的我收到了");
			}

		} catch (JAXBException e) {
			e.printStackTrace();
		} catch (JMSException e) {
			e.printStackTrace();
		}
	}

	public void queueMapMessageHandler(final MapMessage mapMessage) {

	}

	public void queueStreamMessageHandler(final StreamMessage streamMessage) {

	}

	public void queueBytesMessageHandler(final BytesMessage bytesMessage) {

	}

	public void ObjectMessageHandler(final ObjectMessage objectMessage) {

	}

}
